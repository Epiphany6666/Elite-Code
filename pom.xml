<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.elitecode</groupId>
    <artifactId>Elite-Code</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>ec-mapper</module>
        <module>ec-model</module>
        <module>ec-service</module>
        <module>ec-web</module>
        <module>ec-dependencies</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <ec.version>1.0-SNAPSHOT</ec.version>
        <spring-boot.version>2.7.2</spring-boot.version>
        <mybatis.version>2.2.2</mybatis.version>
        <druid.version>1.2.6</druid.version>
        <knife4j.version>4.4.0</knife4j.version>
        <hutool.version>5.8.16</hutool.version>
        <fastjson.version>2.0.53</fastjson.version>
        <elasticsearch.version>7.12.1</elasticsearch.version>
        <docker.maven.plugin.version>0.43.3</docker.maven.plugin.version>
        <docker.host>http://111.230.63.162:2375</docker.host>
    </properties>

    <dependencies>
        <!-- spring-boot-devtools -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional> <!-- 表示依赖不会传递 -->
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>cn.elitecode</groupId>
                <artifactId>ec-model</artifactId>
                <version>${ec.version}</version>
            </dependency>

            <dependency>
                <groupId>cn.elitecode</groupId>
                <artifactId>ec-mapper</artifactId>
                <version>${ec.version}</version>
            </dependency>

            <dependency>
                <groupId>cn.elitecode</groupId>
                <artifactId>ec-service</artifactId>
                <version>${ec.version}</version>
            </dependency>

            <!-- SpringBoot的依赖配置-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Mybatis整合Spring -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.version}</version>
            </dependency>

            <!-- druid启动依赖 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- 整合knife4j -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-openapi2-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>

            <!-- Hutool工具类 -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <!-- 阿里JSON解析器 -->
            <dependency>
                <groupId>com.alibaba.fastjson2</groupId>
                <artifactId>fastjson2</artifactId>
                <version>${fastjson.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <!-- 构建Docker镜像 -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker.maven.plugin.version}</version>
                    <executions>
                        <!-- 定义一个任务 -->
                        <execution>
                            <!-- 指定唯一标识符 -->
                            <id>build-image</id>
                            <!-- 在package生命周期阶段被执行 -->
                            <phase>package</phase>
                            <goals>
                                <!-- 指定该任务的插件目标 -->
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>
                    <!-- 配置执行build目标时所需的具体配置参数 -->
                    <configuration>
                        <!-- Docker 远程管理地址 -->
                        <dockerHost></dockerHost>
                        <images>
                            <image>
                                <!-- 定义镜像名称 -->
                                <name>elitecode/${project.artifactId}:${project.version}</name>
                                <!-- 定义镜像构建行为 -->
                                <build>
                                    <!-- 定义基础镜像 -->
                                    <from>openjdk:17</from>
                                    <args>
                                        <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                                    </args>
                                    <!-- 定义哪些文件拷贝到容器中 -->
                                    <assembly>
                                        <!-- 定义拷贝到容器的目录 -->
                                        <targetDir>/</targetDir>
                                        <!-- 只拷贝生成的jar包 -->
                                        <descriptorRef>artifact</descriptorRef>
                                    </assembly>
                                    <!-- 定义容器启动命令 -->
                                    <entryPoint>["java", "-jar", "-Duser.timezone=Asia/Shanghai", "-Dspring.profiles.active=prod", "/${project.build.finalName}.jar"]</entryPoint>
                                    <!-- 定义维护者 -->
                                    <maintainer>LuoYan</maintainer>
                                </build>
                            </image>
                        </images>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!-- 指定项目源码jdk的版本 -->
                    <source>17</source>
                    <!-- 指定项目编译后的jdk的版本 -->
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>